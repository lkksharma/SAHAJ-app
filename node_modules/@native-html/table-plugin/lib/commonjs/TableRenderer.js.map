{"version":3,"sources":["TableRenderer.ts"],"names":["TableRenderer","props","tableProps","React","createElement","HTMLTable","tableModel","defaultHTMLElementModels","table","extend","contentModel","HTMLContentModel","block","isOpaque"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAkC,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACvE,QAAMC,UAAU,GAAG,gCAAkBD,KAAlB,CAAnB;AACA,sBAAOE,eAAMC,aAAN,CAAoBC,oBAApB,EAA+BH,UAA/B,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACO,MAAMI,UAA6D,GACxEC,gDAAyBC,KAAzB,CAA+BC,MAA/B,CAAsC;AACpCC,EAAAA,YAAY,EAAEC,wCAAiBC,KADK;AAEpCC,EAAAA,QAAQ,EAAE;AAF0B,CAAtC,CADK;;;eAMQb,a","sourcesContent":["import React from 'react';\nimport {\n  CustomBlockRenderer,\n  defaultHTMLElementModels,\n  HTMLContentModel\n} from 'react-native-render-html';\nimport { HTMLElementModel } from '@native-html/transient-render-engine';\nimport useHtmlTableProps from './useHtmlTableProps';\nimport { HTMLTable } from './HTMLTable';\n\n/**\n * The renderer component for the table element. This renderer is fully\n * scalable, and will adjust to `contentWidth` and `computeEmbeddedMaxWidth`.\n * It also features `onLinkPress`.\n *\n * @public\n */\nconst TableRenderer: CustomBlockRenderer = function TableRenderer(props) {\n  const tableProps = useHtmlTableProps(props);\n  return React.createElement(HTMLTable, tableProps);\n};\n\n/**\n * The model to attach to custom table renderers.\n *\n * @public\n */\nexport const tableModel: HTMLElementModel<'table', HTMLContentModel.block> =\n  defaultHTMLElementModels.table.extend({\n    contentModel: HTMLContentModel.block,\n    isOpaque: true\n  });\n\nexport default TableRenderer;\n"]}