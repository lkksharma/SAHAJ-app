{"version":3,"sources":["useHtmlTableProps.ts"],"names":["useHtmlTableProps","style","tnode","tableConfig","WebView","defaultWebViewProps","computeEmbeddedMaxWidth","contentWidth","globalTableConfig","onPress","onLinkPress","resolvedConfig","webViewProps","resolvedContentWidth","Dimensions","get","width","documentBaseUrl","baseUrl","availableWidth","call","html","stats","domNode","displayMode","composedStyles","maxWidth","sourceBaseUrl"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,iBAAT,CACb;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CADa,EAEbC,WAFa,EAGG;AAChB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,mBAAX;AAAgCC,IAAAA;AAAhC,MACJ,4CADF;AAEA,QAAMC,YAAY,GAAG,6CAArB;AACA,QAAMC,iBAAiB,GAAG,6CAAiB,OAAjB,CAA1B;AACA,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA2B,6CAAiB,GAAjB,CAAjC;AACA,QAAMC,cAA2B,GAAG,EAClC,GAAGH,iBAD+B;AAElC,OAAGL,WAF+B;AAGlCS,IAAAA,YAAY,EAAE,EACZ,GAAGP,mBADS;AAEZ,UAAGG,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEI,YAAtB,CAFY;AAGZ,UAAGT,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAES,YAAhB;AAHY;AAHoB,GAApC;AASA,QAAMC,oBAAoB,GACxB,OAAON,YAAP,KAAwB,QAAxB,GACIA,YADJ,GAEIO,wBAAWC,GAAX,CAAe,QAAf,EAAyBC,KAH/B;AAIA,QAAMC,eAAe,GAAG,kDAAsBC,OAA9C;AACA,QAAMC,cAAc,GAClB,CAAAb,uBAAuB,SAAvB,IAAAA,uBAAuB,WAAvB,YAAAA,uBAAuB,CAAEc,IAAzB,CAA8B,IAA9B,EAAoCP,oBAApC,EAA0D,OAA1D,MACAA,oBAFF;AAGA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkB,kDAAoCpB,KAAK,CAACqB,OAA1C,CAAxB;AACA,QAAMC,WAAW,GAAGb,cAAc,CAACa,WAAf,IAA8B,QAAlD;AACA,QAAMC,cAAc,GAAG,CACrBxB,KADqB,EAErBuB,WAAW,KAAK,QAAhB,GACI;AAAER,IAAAA,KAAK,EAAEG;AAAT,GADJ,GAEIK,WAAW,KAAK,UAAhB,GACA;AAAEE,IAAAA,QAAQ,EAAEP;AAAZ,GADA,GAEA,IANiB,CAAvB;AASA,SAAO,EACL,GAAGR,cADE;AAEL,OAAGW,KAFE;AAGLD,IAAAA,IAHK;AAILM,IAAAA,aAAa,EAAEV,eAJV;AAKLhB,IAAAA,KAAK,EAAEwB,cALF;AAMLf,IAAAA,WANK;AAOLN,IAAAA;AAPK,GAAP;AASD","sourcesContent":["import { Dimensions } from 'react-native';\nimport {\n  CustomRendererProps,\n  useSharedProps,\n  useDocumentMetadata,\n  useRendererProps,\n  useContentWidth\n} from 'react-native-render-html';\nimport extractHtmlAndStatsFromTableDomNode from './extractHtmlAndStatsFromTableDomNode';\nimport { HTMLTableProps, TableConfig } from './types';\nimport type { TBlock } from '@native-html/transient-render-engine';\n\n/**\n * Extract props for the HTMLTable component from renderer function arguments.\n * This function is especially usefull for custom table renderers.\n *\n * @param props - The props of a custom block renderer.\n * @param tableConfig - Override config options.\n *\n * @public\n */\nexport default function useHtmlTableProps(\n  { style, tnode }: CustomRendererProps<TBlock>,\n  tableConfig?: TableConfig\n): HTMLTableProps {\n  const { WebView, defaultWebViewProps, computeEmbeddedMaxWidth } =\n    useSharedProps();\n  const contentWidth = useContentWidth();\n  const globalTableConfig = useRendererProps('table');\n  const { onPress: onLinkPress } = useRendererProps('a');\n  const resolvedConfig: TableConfig = {\n    ...globalTableConfig,\n    ...tableConfig,\n    webViewProps: {\n      ...defaultWebViewProps,\n      ...globalTableConfig?.webViewProps,\n      ...tableConfig?.webViewProps\n    }\n  };\n  const resolvedContentWidth =\n    typeof contentWidth === 'number'\n      ? contentWidth\n      : Dimensions.get('window').width;\n  const documentBaseUrl = useDocumentMetadata().baseUrl;\n  const availableWidth =\n    computeEmbeddedMaxWidth?.call(null, resolvedContentWidth, 'table') ||\n    resolvedContentWidth;\n  const { html, stats } = extractHtmlAndStatsFromTableDomNode(tnode.domNode);\n  const displayMode = resolvedConfig.displayMode || 'normal';\n  const composedStyles = [\n    style,\n    displayMode === 'expand'\n      ? { width: availableWidth }\n      : displayMode === 'embedded'\n      ? { maxWidth: availableWidth }\n      : null\n  ];\n\n  return {\n    ...resolvedConfig,\n    ...stats,\n    html,\n    sourceBaseUrl: documentBaseUrl,\n    style: composedStyles,\n    onLinkPress,\n    WebView\n  };\n}\n"]}