import { ComponentType } from 'react';
import { CustomBlockRenderer } from 'react-native-render-html';
import { CustomRendererProps } from 'react-native-render-html';
import { HTMLContentModel } from 'react-native-render-html';
import { HTMLElementModel } from '@native-html/transient-render-engine';
import { RenderersProps } from 'react-native-render-html';
import { StyleProp } from 'react-native';
import type { TBlock } from '@native-html/transient-render-engine';
import { ViewStyle } from 'react-native';

/**
 * A component to render iframes in react-native-render-html.
 *
 * @public
 */
export declare function HTMLIframe({ WebView, webViewProps: userWebViewProps, source, style, onLinkPress, scaleFactor, injectedCSSStyles, removeBodySpacing, scalesPageToFit }: HTMLIframeProps): JSX.Element;

/**
 * Props for the HTMLIframe component.
 *
 * @public
 */
export declare interface HTMLIframeProps<WebViewProps = any> extends IframeConfig {
    /**
     * The `WebView` Component you wish to use.
     */
    WebView: ComponentType<WebViewProps>;
    /**
     * Props to be passed to the `WebView` component;
     */
    webViewProps?: WebViewProps;
    /**
     * The source for the iframe.
     */
    source: {
        uri?: string;
        html?: string;
    };
    /**
     * Container style.
     */
    style: StyleProp<ViewStyle>;
    /**
     * Handle link press events.
     */
    onLinkPress?: RenderersProps['a']['onPress'];
    /**
     * Html attributes for this iframe node.
     */
    htmlAttribs: Record<string, string>;
    /**
     * When scalesPageToFit is enabled, scales the WebView zoom level to make sure the
     * viewport fits contentWidth.
     */
    scaleFactor: number;
}

/**
 * Configuration options for the HTMLIframe component.
 * You can pass those options through `renderersProps.iframe`
 * HTML prop.
 *
 * @public
 */
export declare interface IframeConfig {
    /**
     * When the iframe attribute width is wider than the contentWidth, scales
     * down the viewport so that it doesn't overflows horizontally.
     *
     * @remarks Although it looks like the eponymous `WebView` prop, it works
     * both on iOS and Android.
     *
     * @defaultvalue false
     */
    scalesPageToFit?: boolean;
    /**
     * When `true`, a stylesheet will be inserted in the `WebView` to remove
     * padding and margins for the `body` element.
     */
    removeBodySpacing?: boolean;
    /**
     * When defined, the provided CSS will be injected in a `style` element.
     */
    injectedCSSStyles?: string;
    /**
     * Any props you'd like to pass to the `WebView` component.
     *
     * @remarks
     * `source` and `javascriptEnabled` will be ignored and overriden.
     */
    webViewProps?: any;
}

/**
 * The model to attach to custom iframe renderers.
 *
 * @public
 */
export declare const iframeModel: HTMLElementModel<'iframe', HTMLContentModel.block>;

/**
 * The renderer component for the iframe element. This renderer is fully
 * scalable, and will adjust to `contentWidth` and `computeEmbeddedMaxWidth`.
 * It also features `onLinkPress`.
 *
 * @public
 */
declare const IframeRenderer: CustomBlockRenderer;
export default IframeRenderer;

/**
 * Extract props for the HTMLIframe component from renderer function arguments.
 * This function is especially usefull for custom iframe renderers.
 *
 * @param props - The props of a custom block renderer.
 * @param iframeConfig - Override config options.
 *
 * @public
 */
export declare function useHtmlIframeProps({ style, tnode }: CustomRendererProps<TBlock>, iframeConfig?: IframeConfig): HTMLIframeProps;

export { }
