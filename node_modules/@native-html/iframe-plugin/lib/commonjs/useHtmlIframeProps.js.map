{"version":3,"sources":["useHtmlIframeProps.ts"],"names":["defaultIframeConfig","webViewProps","allowsFullscreenVideo","useHtmlIframeProps","style","tnode","iframeConfig","WebView","defaultWebViewProps","computeEmbeddedMaxWidth","provideEmbeddedHeaders","contentWidth","globalIframeConfig","onPress","onLinkPress","resolvedConfig","resolvedContentWidth","Dimensions","get","width","documentBaseUrl","baseUrl","availableWidth","call","htmlAttribs","attributes","normalizedUrl","src","height","restStyle","attrWidth","Number","attrHeight","printConfig","isNaN","styleWidth","styleHeight","printWidth","printHeight","scaleFactor","source","srcdoc","html","uri","headers"],"mappings":"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","sourcesContent":["import { Dimensions } from 'react-native';\nimport {\n  CustomRendererProps,\n  useDocumentMetadata,\n  useSharedProps,\n  useNormalizedUrl,\n  useRendererProps,\n  useContentWidth\n} from 'react-native-render-html';\nimport extractPrintDimensions, {\n  ExtractPrintDimensionsParams\n} from './extractPrintDimensions';\nimport { IframeConfig, HTMLIframeProps } from './HTMLIframe';\nimport type { TBlock } from '@native-html/transient-render-engine';\n\nconst defaultIframeConfig: IframeConfig = {\n  webViewProps: {\n    allowsFullscreenVideo: true\n  }\n};\n\n/**\n * Extract props for the HTMLIframe component from renderer function arguments.\n * This function is especially usefull for custom iframe renderers.\n *\n * @param props - The props of a custom block renderer.\n * @param iframeConfig - Override config options.\n *\n * @public\n */\nexport default function useHtmlIframeProps(\n  { style, tnode }: CustomRendererProps<TBlock>,\n  iframeConfig?: IframeConfig\n): HTMLIframeProps {\n  const {\n    WebView,\n    defaultWebViewProps,\n    computeEmbeddedMaxWidth,\n    provideEmbeddedHeaders\n  } = useSharedProps();\n  const contentWidth = useContentWidth();\n  const globalIframeConfig = useRendererProps('iframe');\n  const { onPress: onLinkPress } = useRendererProps('a');\n  const resolvedConfig = {\n    ...defaultIframeConfig,\n    ...globalIframeConfig,\n    ...iframeConfig,\n    webViewProps: {\n      ...defaultWebViewProps,\n      ...defaultIframeConfig.webViewProps,\n      ...globalIframeConfig?.webViewProps,\n      ...iframeConfig?.webViewProps\n    }\n  };\n  const resolvedContentWidth =\n    typeof contentWidth === 'number'\n      ? contentWidth\n      : Dimensions.get('window').width;\n  const documentBaseUrl = useDocumentMetadata().baseUrl;\n  const availableWidth =\n    computeEmbeddedMaxWidth?.call(null, resolvedContentWidth, 'iframe') ||\n    resolvedContentWidth;\n  const htmlAttribs = tnode.attributes;\n  const normalizedUrl = useNormalizedUrl(htmlAttribs.src);\n  const { width, height, ...restStyle } = style;\n  const attrWidth = Number(htmlAttribs.width);\n  const attrHeight = Number(htmlAttribs.height);\n  const printConfig: ExtractPrintDimensionsParams = {\n    attrWidth: Number.isNaN(attrWidth) ? null : attrWidth,\n    attrHeight: Number.isNaN(attrHeight) ? null : attrHeight,\n    styleWidth: typeof width === 'string' ? null : width,\n    styleHeight: typeof height === 'string' ? null : height,\n    contentWidth: availableWidth\n  };\n  const { printWidth, printHeight } = extractPrintDimensions(printConfig);\n  const scaleFactor =\n    typeof printConfig.attrWidth === 'number' &&\n    printConfig.attrWidth > printWidth\n      ? printWidth / attrWidth\n      : 1;\n\n  const source = htmlAttribs.srcdoc\n    ? { html: htmlAttribs.srcdoc as string, baseUrl: documentBaseUrl }\n    : {\n        uri: normalizedUrl,\n        headers: provideEmbeddedHeaders?.(normalizedUrl, 'iframe', {\n          printHeight,\n          printWidth\n        })\n      };\n\n  return {\n    ...resolvedConfig,\n    source,\n    onLinkPress,\n    htmlAttribs,\n    scaleFactor,\n    style: [restStyle, { width: printWidth, height: printHeight }],\n    WebView\n  };\n}\n"]}