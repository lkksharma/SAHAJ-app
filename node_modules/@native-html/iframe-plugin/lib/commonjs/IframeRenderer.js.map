{"version":3,"sources":["IframeRenderer.ts"],"names":["IframeRenderer","props","iframeProps","React","createElement","HTMLIframe","iframeModel","defaultHTMLElementModels","iframe","extend","contentModel","HTMLContentModel","block","isOpaque"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAmC,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AACzE,QAAMC,WAAW,GAAG,iCAAmBD,KAAnB,CAApB;AACA,sBAAOE,eAAMC,aAAN,CAAoBC,mBAApB,EAAgCH,WAAhC,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACO,MAAMI,WAA+D,GAC1EC,gDAAyBC,MAAzB,CAAgCC,MAAhC,CAAuC;AACrCC,EAAAA,YAAY,EAAEC,wCAAiBC,KADM;AAErCC,EAAAA,QAAQ,EAAE;AAF2B,CAAvC,CADK;;;eAMQb,c","sourcesContent":["import React from 'react';\nimport {\n  CustomBlockRenderer,\n  defaultHTMLElementModels,\n  HTMLContentModel\n} from 'react-native-render-html';\nimport { HTMLElementModel } from '@native-html/transient-render-engine';\nimport useHtmlIframeProps from './useHtmlIframeProps';\nimport HTMLIframe from './HTMLIframe';\n\n/**\n * The renderer component for the iframe element. This renderer is fully\n * scalable, and will adjust to `contentWidth` and `computeEmbeddedMaxWidth`.\n * It also features `onLinkPress`.\n *\n * @public\n */\nconst IframeRenderer: CustomBlockRenderer = function IframeRenderer(props) {\n  const iframeProps = useHtmlIframeProps(props);\n  return React.createElement(HTMLIframe, iframeProps);\n};\n\n/**\n * The model to attach to custom iframe renderers.\n *\n * @public\n */\nexport const iframeModel: HTMLElementModel<'iframe', HTMLContentModel.block> =\n  defaultHTMLElementModels.iframe.extend({\n    contentModel: HTMLContentModel.block,\n    isOpaque: true\n  });\n\nexport default IframeRenderer;\n"]}