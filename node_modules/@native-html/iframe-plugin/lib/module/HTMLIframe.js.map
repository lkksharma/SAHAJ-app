{"version":3,"sources":["HTMLIframe.tsx"],"names":["React","useCallback","useMemo","HandleLinkPressFeature","InjectStyleFeature","ForceResponsiveViewportFeature","useWebshell","View","linkPressTargetToOnDOMLinkPressArgs","RM_BODY_SPACING_CSS","features","preventDefault","HTMLIframe","WebView","webViewProps","userWebViewProps","source","style","onLinkPress","scaleFactor","injectedCSSStyles","removeBodySpacing","scalesPageToFit","onDOMLinkPress","event","apply","injectedCss","concat","assembledFeatures","feats","initScale","maxScale","minScale","push","css","props","testID"],"mappings":"AAAA,OAAOA,KAAP,IAA+BC,WAA/B,EAA4CC,OAA5C,QAA2D,OAA3D;AACA,SACEC,sBADF,EAEEC,kBAFF,EAGEC,8BAHF,EAKEC,WALF,QAMO,8BANP;AAOA,SAAoBC,IAApB,QAA2C,cAA3C;AAEA,SAASC,mCAAT,QAAoD,2BAApD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA4EA,MAAMC,mBAAmB,GACvB,oDADF;AAGA,MAAMC,QAAQ,GAAG,CAAC,IAAIP,sBAAJ,CAA2B;AAAEQ,EAAAA,cAAc,EAAE;AAAlB,CAA3B,CAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoB;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,YAAY,EAAEC,gBAFmB;AAGjCC,EAAAA,MAHiC;AAIjCC,EAAAA,KAJiC;AAKjCC,EAAAA,WALiC;AAMjCC,EAAAA,WANiC;AAOjCC,EAAAA,iBAPiC;AAQjCC,EAAAA,iBARiC;AASjCC,EAAAA,eAAe,GAAG;AATe,CAApB,EAUK;AAClB,QAAMC,cAAc,GAAGtB,WAAW,CAC/BuB,KAAD,IACEN,WADF,aACEA,WADF,uBACEA,WAAW,CAAEO,KAAb,CAAmB,IAAnB,EAAyBjB,mCAAmC,CAACgB,KAAD,CAA5D,CAF8B,EAGhC,CAACN,WAAD,CAHgC,CAAlC;AAKA,QAAMQ,WAAW,GAAGxB,OAAO,CACzB,MACE,CAAEmB,iBAAiB,IAAIZ,mBAAtB,IAA8C,EAA/C,EAAmDkB,MAAnD,CACEP,iBAAiB,IAAI,EADvB,CAFuB,EAKzB,CAACA,iBAAD,EAAoBC,iBAApB,CALyB,CAA3B;AAOA,QAAMO,iBAAiB,GAAG1B,OAAO,CAAC,MAAM;AACtC,UAAM2B,KAAK,GAAG,CACZ,GAAGnB,QADS,EAEZ,IAAIL,8BAAJ,CAAmC;AACjCyB,MAAAA,SAAS,EAAER,eAAe,GAAGH,WAAH,GAAiB,CADV;AAEjCY,MAAAA,QAAQ,EAAET,eAAe,GAAGH,WAAH,GAAiB,CAFT;AAGjCa,MAAAA,QAAQ,EAAEV,eAAe,GAAGH,WAAH,GAAiB;AAHT,KAAnC,CAFY,CAAd;;AAQA,QAAIO,WAAJ,EAAiB;AACfG,MAAAA,KAAK,CAACI,IAAN,CACE,IAAI7B,kBAAJ,CAAuB;AACrB8B,QAAAA,GAAG,EAAER;AADgB,OAAvB,CADF;AAKD;;AACD,WAAOG,KAAP;AACD,GAjBgC,EAiB9B,CAACH,WAAD,EAAcP,WAAd,EAA2BG,eAA3B,CAjB8B,CAAjC;AAkBA,QAAMR,YAAY,GAAGR,WAAW,CAAC;AAC/BI,IAAAA,QAAQ,EAAEkB,iBADqB;AAE/BO,IAAAA,KAAK,EAAE,EACL,GAAGpB,gBADE;AAELQ,MAAAA,cAFK;AAGLP,MAAAA,MAHK;AAILoB,MAAAA,MAAM,EAAE;AAJH;AAFwB,GAAD,CAAhC,CA/BkB,CAwClB;AACA;;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB;AAAb,kBACE,oBAAC,OAAD,EAAaH,YAAb,CADF,CADF;AAKD","sourcesContent":["import React, { ComponentType, useCallback, useMemo } from 'react';\nimport {\n  HandleLinkPressFeature,\n  InjectStyleFeature,\n  ForceResponsiveViewportFeature,\n  LinkPressTarget,\n  useWebshell\n} from '@formidable-webview/webshell';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport { RenderersProps } from 'react-native-render-html';\nimport { linkPressTargetToOnDOMLinkPressArgs } from '@native-html/plugins-core';\n\n/**\n * Configuration options for the HTMLIframe component.\n * You can pass those options through `renderersProps.iframe`\n * HTML prop.\n *\n * @public\n */\nexport interface IframeConfig {\n  /**\n   * When the iframe attribute width is wider than the contentWidth, scales\n   * down the viewport so that it doesn't overflows horizontally.\n   *\n   * @remarks Although it looks like the eponymous `WebView` prop, it works\n   * both on iOS and Android.\n   *\n   * @defaultvalue false\n   */\n  scalesPageToFit?: boolean;\n\n  /**\n   * When `true`, a stylesheet will be inserted in the `WebView` to remove\n   * padding and margins for the `body` element.\n   */\n  removeBodySpacing?: boolean;\n\n  /**\n   * When defined, the provided CSS will be injected in a `style` element.\n   */\n  injectedCSSStyles?: string;\n\n  /**\n   * Any props you'd like to pass to the `WebView` component.\n   *\n   * @remarks\n   * `source` and `javascriptEnabled` will be ignored and overriden.\n   */\n  webViewProps?: any;\n}\n\n/**\n * Props for the HTMLIframe component.\n *\n * @public\n */\nexport interface HTMLIframeProps<WebViewProps = any> extends IframeConfig {\n  /**\n   * The `WebView` Component you wish to use.\n   */\n  WebView: ComponentType<WebViewProps>;\n\n  /**\n   * Props to be passed to the `WebView` component;\n   */\n  webViewProps?: WebViewProps;\n\n  /**\n   * The source for the iframe.\n   */\n  source: { uri?: string; html?: string };\n\n  /**\n   * Container style.\n   */\n  style: StyleProp<ViewStyle>;\n\n  /**\n   * Handle link press events.\n   */\n  onLinkPress?: RenderersProps['a']['onPress'];\n\n  /**\n   * Html attributes for this iframe node.\n   */\n  htmlAttribs: Record<string, string>;\n\n  /**\n   * When scalesPageToFit is enabled, scales the WebView zoom level to make sure the\n   * viewport fits contentWidth.\n   */\n  scaleFactor: number;\n}\n\nconst RM_BODY_SPACING_CSS =\n  'body{padding: 0 !important; margin: 0 !important;}';\n\nconst features = [new HandleLinkPressFeature({ preventDefault: true })];\n\n/**\n * A component to render iframes in react-native-render-html.\n *\n * @public\n */\nexport default function HTMLIframe({\n  WebView,\n  webViewProps: userWebViewProps,\n  source,\n  style,\n  onLinkPress,\n  scaleFactor,\n  injectedCSSStyles,\n  removeBodySpacing,\n  scalesPageToFit = false\n}: HTMLIframeProps) {\n  const onDOMLinkPress = useCallback(\n    (event: LinkPressTarget) =>\n      onLinkPress?.apply(null, linkPressTargetToOnDOMLinkPressArgs(event)),\n    [onLinkPress]\n  );\n  const injectedCss = useMemo(\n    () =>\n      ((removeBodySpacing && RM_BODY_SPACING_CSS) || '').concat(\n        injectedCSSStyles || ''\n      ),\n    [injectedCSSStyles, removeBodySpacing]\n  );\n  const assembledFeatures = useMemo(() => {\n    const feats = [\n      ...features,\n      new ForceResponsiveViewportFeature({\n        initScale: scalesPageToFit ? scaleFactor : 1,\n        maxScale: scalesPageToFit ? scaleFactor : 1,\n        minScale: scalesPageToFit ? scaleFactor : 1\n      })\n    ];\n    if (injectedCss) {\n      feats.push(\n        new InjectStyleFeature({\n          css: injectedCss\n        }) as any\n      );\n    }\n    return feats;\n  }, [injectedCss, scaleFactor, scalesPageToFit]);\n  const webViewProps = useWebshell({\n    features: assembledFeatures,\n    props: {\n      ...userWebViewProps,\n      onDOMLinkPress,\n      source,\n      testID: 'iframe'\n    }\n  });\n  // We need to wrap the WebView in a View to circumvent a bug in\n  // react-native-webview, see https://git.io/JKY1r\n  return (\n    <View style={style}>\n      <WebView {...webViewProps} />\n    </View>\n  );\n}\n"]}