{"version":3,"sources":["index.tsx"],"names":["Vimeo","handlers","handlersArr","videoId","params","reference","otherProps","webRef","url","autoPlay","includes","registerHandlers","PlayerEvents","forEach","name","onBridgeMessage","event","payload","JSON","parse","nativeEvent","data","bridgeMessageHandler","uri","headers","Referer"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEO,MAAMA,KAA4B,GAAG,CAAC;AAC3CC,EAAAA,QAAQ,EAAEC,WADiC;AAE3CC,EAAAA,OAF2C;AAG3CC,EAAAA,MAH2C;AAI3CC,EAAAA,SAJ2C;AAK3C,KAAGC;AALwC,CAAD,KAMtC;AACJ,QAAMC,MAAM,GAAG,oBAAf;AACA,QAAMC,GAAW,GAAGJ,MAAM,GACrB,kCAAiCD,OAAQ,IAAGC,MAAO,EAD9B,GAErB,kCAAiCD,OAAQ,EAF9C;AAIA,QAAMM,QAAQ,GAAGL,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEM,QAAR,CAAiB,YAAjB,CAAjB;AAEA,QAAMT,QAAa,GAAG,EAAtB;AAEA,QAAMU,gBAAgB,GAAG,wBAAY,MAAM;AACzCC,wBAAaC,OAAb,CAAsBC,IAAD,IAAU;AAC7B,UAAIZ,WAAJ,EAAiBD,QAAQ,CAACa,IAAD,CAAR,GAAiBZ,WAAW,CAACY,IAAD,CAA5B;AAClB,KAFD;AAGD,GAJwB,EAItB,CAACb,QAAD,EAAWC,WAAX,CAJsB,CAAzB;AAMAS,EAAAA,gBAAgB;AAEhB,QAAMI,eAAe,GAAG,wBACrBC,KAAD,IAAgB;AACd,UAAMC,OAAoC,GAAGC,IAAI,CAACC,KAAL,CAC3CH,KAAK,CAACI,WAAN,CAAkBC,IADyB,CAA7C;AAIA,QAAIC,oBAAoB,GAAGrB,QAAQ,CAACgB,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEH,IAAV,CAAnC;AACA,QAAIQ,oBAAJ,EAA0BA,oBAAoB,CAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,IAAV,CAApB;AAC3B,GARqB,EAStB,CAACpB,QAAD,CATsB,CAAxB;AAYA,sBACE,6BAAC,2BAAD;AACE,IAAA,qBAAqB,EAAE,IADzB;AAEE,IAAA,MAAM,EAAE;AAAEsB,MAAAA,GAAG,EAAEf,GAAP;AAAYgB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAEpB;AAAX;AAArB,KAFV;AAGE,IAAA,iBAAiB,EAAE,IAHrB;AAIE,IAAA,GAAG,EAAEE,MAJP;AAKE,IAAA,SAAS,EAAEQ,eALb;AAME,IAAA,aAAa,EAAE,KANjB;AAOE,IAAA,kBAAkB,EAAE,uBAASP,GAAT,CAPtB;AAQE,IAAA,+BAA+B,EAAE,CAACC;AARpC,KASMH,UATN,EADF;AAaD,CAjDM","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport { WebView } from 'react-native-webview'\n\nimport template from './template'\nimport { LayoutProps, PlayerEvents } from './types'\n\nexport const Vimeo: React.FC<LayoutProps> = ({\n  handlers: handlersArr,\n  videoId,\n  params,\n  reference,\n  ...otherProps\n}) => {\n  const webRef = useRef<WebView>()\n  const url: string = params\n    ? `https://player.vimeo.com/video/${videoId}?${params}`\n    : `https://player.vimeo.com/video/${videoId}`\n\n  const autoPlay = params?.includes('autoplay=1')\n\n  const handlers: any = {}\n\n  const registerHandlers = useCallback(() => {\n    PlayerEvents.forEach((name) => {\n      if (handlersArr) handlers[name] = handlersArr[name]\n    })\n  }, [handlers, handlersArr])\n\n  registerHandlers()\n\n  const onBridgeMessage = useCallback(\n    (event: any) => {\n      const payload: { name: string; data: any } = JSON.parse(\n        event.nativeEvent.data\n      )\n\n      let bridgeMessageHandler = handlers[payload?.name]\n      if (bridgeMessageHandler) bridgeMessageHandler(payload?.data)\n    },\n    [handlers]\n  )\n\n  return (\n    <WebView\n      allowsFullscreenVideo={true}\n      source={{ uri: url, headers: { Referer: reference } }}\n      javaScriptEnabled={true}\n      ref={webRef as any}\n      onMessage={onBridgeMessage}\n      scrollEnabled={false}\n      injectedJavaScript={template(url)}\n      mediaPlaybackRequiresUserAction={!autoPlay}\n      {...otherProps}\n    />\n  )\n}\n"]}